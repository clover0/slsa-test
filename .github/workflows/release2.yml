name: Release

on:
  push:
    tags:
      - 'v*'

permissions: { }

jobs:
#  build-binary:
#    permissions:
#      contents: write
#      id-token: write
#      attestations: write
#    outputs:
#      hashes: ${{ steps.binary.outputs.hashes }}
#    runs-on: ubuntu-24.04
#    steps:
#      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
#        with:
#          fetch-depth: 0
#
#      - uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
#        with:
#          go-version: 1.23
#
#      - uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
#        with:
#          cosign-release: 'v2.4.1'
#
#      - name: RUN GoReleaser
#        id: goreleaser
#        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
#        with:
#          args: release --clean
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Generate binary hashes
#        id: binary
#        env:
#          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
#        run: |
#          set -euo pipefail
#
#          echo $ARTIFACTS
#
#          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
#          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"
#
#      - uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
#        with:
#          subject-path: |
#            dist/*.tar.gz
#            dist/*.txt
#            dist/*.pem
#            dist/*.sig
#
#
#  provenance-bin:
#    needs: [ build-binary ]
#    permissions:
#      actions: read # To read the workflow path.
#      id-token: write # To sign the provenance.
#      contents: write # To add assets to a release.
#    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
#    with:
#      base64-subjects: "${{ needs.build-binary.outputs.hashes }}"
#      upload-assets: true

  build-image:
    permissions:
      contents: write
      id-token: write
      packages: write
    outputs:
      digest-amd64: ${{ steps.image-amd64.outputs.digest}}
      digest-arm64: ${{ steps.image-arm64.outputs.digest }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        with:
          cosign-release: 'v2.4.1'

      - uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0

      - name: Docker Login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: clover0
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          ls -la
          pwd

      - name: RUN GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output amd64 digest
        id: image-amd64
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          echo $ARTIFACTS
          sha_digest=$(echo "$ARTIFACTS" |  jq -re 'first(.[] | select(.goarch == "amd64" and .type == "Published Docker Image")) | .extra.Digest')
          echo sha_digest $sha_digest
          digest=$(echo "${sha_digest}" | cut -d':' -f2)
          echo digest $digest
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

      - name: Output arm64 digest
        id: image-arm64
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          sha_digest=$(echo "$ARTIFACTS" |  jq -re 'first(.[] | select(.goarch == "arm64" and .type == "Published Docker Image")) | .extra.Digest')
          echo sha_digest $sha_digest
          digest=$(echo "${sha_digest}" | cut -d':' -f2)
          echo digest $digest
          echo "digest=$digest" >> "$GITHUB_OUTPUT"

  provenance-image-amd64:
    needs: [ build-image ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/clover0/slsa-test
      digest: ${{ needs.build-image.outputs.digest-amd64 }}
      registry-username: clover0
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  provenance-image-arm64:
    needs: [ build-image ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/clover0/slsa-test
      digest: ${{ needs.build-image.outputs.digest-amd64 }}
      registry-username: clover0
      compile-generator: true
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
