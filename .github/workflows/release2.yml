name: Release

on:
  release:
    types: [ created ]

permissions: { }

jobs:
  build-image:
    if: github.event_name == 'release' && github.event.action == 'created'
    permissions:
      contents: write
      id-token: write
      packages: write
      attestations: write
    outputs:
      digest-amd64: ${{ steps.digest-amd64.outputs.digest}}
      digest-arm64: ${{ steps.digest-arm64.outputs.digest}}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0
        with:
          cosign-release: 'v2.4.1'

      - uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0

      - name: Docker Login
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: clover0
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: |
          ls -la
          pwd

      - name: RUN GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output AMD64 digest
        id: digest-amd64
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          image_and_tag=$(echo "$ARTIFACTS" | jq -er 'first(.[] | select (.goarch=="amd64" and .type=="Published Docker Image")) | .path')
          image=$(echo "${image_and_tag}" | cut -d':' -f1)
          sha_digest=$(echo "$ARTIFACTS" |  jq -er 'first(.[] | select (.goarch=="amd64" and .type=="Published Docker Image")) | .extra.Digest')
          echo "name=$image" >> "$GITHUB_OUTPUT"
          echo "digest=$sha_digest" >> "$GITHUB_OUTPUT"

      - name: Output ARM64 digest
        id: digest-arm64
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail
          image_and_tag=$(echo "$ARTIFACTS" | jq -er 'first(.[] | select (.goarch=="arm64" and .type=="Published Docker Image")) | .path')
          image=$(echo "${image_and_tag}" | cut -d':' -f1)
          sha_digest=$(echo "$ARTIFACTS" |  jq -er 'first(.[] | select (.goarch=="arm64" and .type=="Published Docker Image")) | .extra.Digest')
          
          echo "name=$image" >> "$GITHUB_OUTPUT"
          echo "digest=$sha_digest" >> "$GITHUB_OUTPUT"

      - uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-name: ghcr.io/clover0/slsa-test
          subject-digest: ${{ steps.digest-amd64.outputs.digest }}
          push-to-registry: true

      - uses: actions/attest-build-provenance@7668571508540a607bdfd90a87a560489fe372eb # v2.1.0
        with:
          subject-name: ghcr.io/clover0/slsa-test
          subject-digest: ${{ steps.digest-arm64.outputs.digest }}
          push-to-registry: true

  provenance-amd64:
    needs: [ build-image ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/clover0/slsa-test
      digest: ${{ needs.build-image.outputs.digest-amd64 }}
      registry-username: clover0
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  provenance-arm64:
    needs: [ build-image ]
    permissions:
      actions: read
      id-token: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.0.0
    with:
      image: ghcr.io/clover0/slsa-test
      digest: ${{ needs.build-image.outputs.digest-arm64 }}
      registry-username: clover0
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
