name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - 'release/**'

jobs:
  build:
    outputs:
      hashes: ${{ steps.binary.outputs.hashes }}
#      image: ${{ steps.image.outputs.name }}
#      digest: ${{ steps.image.outputs.digest }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5.2.0
        with:
          go-version: 1.23

      - name: Setup GoReleaser
        uses: goreleaser/goreleaser-action@9ed2f89a662bf1735a48bc8557fd212fa902bebf # v6.1.0
        with:
          install-only: true

      - name: Run GoReleaser
        id: goreleaser
        run: goreleaser release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate binary hashes
        id: binary
        env:
          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
        run: |
          set -euo pipefail

          checksum_file=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Checksum") | .path')
          echo "hashes=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"

#      - name: Image digest
#        id: image
#        env:
#          ARTIFACTS: "${{ steps.goreleaser.outputs.artifacts }}"
#        run: |
#          set -euo pipefail
#          image_and_digest=$(echo "$ARTIFACTS" | jq -r '.[] | select (.type=="Docker Manifest") | .path')
#          image=$(echo "${image_and_digest}" | cut -d'@' -f1 | cut -d':' -f1)
#          digest=$(echo "${image_and_digest}" | cut -d'@' -f2)
#          echo "name=$image" >> "$GITHUB_OUTPUT"
#          echo "digest=$digest" >> "$GITHUB_OUTPUT"


  provenance:
    needs: [ build ]
    permissions:
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
      contents: write # To add assets to a release.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      upload-assets: true
